library(SPARQL)
endpoint <- 'http://semanticweb.cs.vu.nl/verrijktkoninkrijk/sparql/'
#endpoint <- 'http://localhost:3020/sparql/'
options <- NULL
#options <- "output=xml"
prefix <- c("niod","http://purl.org/collections/nl/niod/")
sparql_prefix <- "PREFIX dcterms: <http://purl.org/dc/terms/>
PREFIX niod: <http://purl.org/collections/nl/niod/>
PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
PREFIX dbp-prop: <http://nl.dbpedia.org/property/>
PREFIX dbp-res: <http://nl.dbpedia.org/resource/>
"
query1 ="SELECT * WHERE {
?entity niod:nerClass niod:nerclass-per;
owl:sameAs ?dbpedia_entry;
niod:pRef ?pref.
?dbpedia_entry dbp-prop:functie dbp-res:Minister-president_van_Nederland.
}"
q <- paste(sparql_prefix, query1)
res1 <- SPARQL(url=endpoint,query=q,ns=prefix)$results
res1
entity <- table(res1$dbpedia_entry)
sorted_counts <- sort(entity)
sorted_counts
lbls<-paste(names(sorted_counts)," (",sorted_counts, ")", sep="")
pie(sorted_counts, labels=lbls, col=rainbow(12))
library(SPARQL)
endpoint <- 'http://semanticweb.cs.vu.nl/verrijktkoninkrijk/sparql/'
#endpoint <- 'http://eculture.cs.vu.nl:1914/sparql/'
#endpoint <- 'http://localhost:3020/sparql/'
options <- NULL
#options <- "output=xml"
prefix <- c("niod","http://purl.org/collections/nl/niod/")
sparql_prefix <- "PREFIX niod: <http://purl.org/collections/nl/niod/>
PREFIX skos: <http://www.w3.org/2004/02/skos/core#>"
query0 ="
SELECT ?pl ?provname ?pref
WHERE
{
?s skos:inScheme niod:BotBScheme.
?s skos:prefLabel ?pl.
?s skos:exactMatch ?geo.
?geo <http://www.geonames.org/ontology#parentADM1> ?prov.
?prov <http://www.geonames.org/ontology%23name> ?provname.
?s niod:pageRef ?pref.
}"
#
# query1 ="
#           SELECT ?pl ?provname ?pref
#           WHERE
#           {
#           ?s skos:inScheme niod:EntityScheme.
#           ?s skos:prefLabel ?pl.
#           ?s skos:exactMatch ?geo.
#           ?geo <http://www.geonames.org/ontology#parentADM1> ?prov.
#           ?prov <http://www.geonames.org/ontology%23name> ?provname.
#           ?s niod:pRef ?pref.
#           }"
q <- paste(sparql_prefix, query0)
res1 <- SPARQL(url=endpoint,query=q,ns=prefix)$results
res1
count_per_prov <- table(res1$prov)
sorted_counts <- sort(count_per_prov)
sorted_counts
lbls<-paste(names(sorted_counts)," (",sorted_counts, ")", sep="")
pie(sorted_counts, labels=lbls, col=rainbow(12))
library(SPARQL)
endpoint <- 'http://semanticweb.cs.vu.nl/verrijktkoninkrijk/sparql/'
#endpoint <- 'http://localhost:3020/sparql/'
options <- NULL
#options <- "output=xml"
prefix <- c("niod","http://purl.org/collections/nl/niod/")
sparql_prefix <- "PREFIX dcterms: <http://purl.org/dc/terms/>
PREFIX niod: <http://purl.org/collections/nl/niod/>
PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
PREFIX dbp-prop: <http://nl.dbpedia.org/property/>
PREFIX dbp-res: <http://nl.dbpedia.org/resource/>
"
query1 ="SELECT * WHERE {
?entity niod:nerClass niod:nerclass-per;
owl:sameAs ?dbpedia_entry;
niod:pRef ?pref.
?dbpedia_entry dbp-prop:functie dbp-res:Minister-president_van_Nederland.
}"
q <- paste(sparql_prefix, query1)
res1 <- SPARQL(url=endpoint,query=q,ns=prefix)$results
res1
entity <- table(res1$dbpedia_entry)
sorted_counts <- sort(entity)
sorted_counts
lbls<-paste(names(sorted_counts)," (",sorted_counts, ")", sep="")
pie(sorted_counts, labels=lbls, col=rainbow(12))
